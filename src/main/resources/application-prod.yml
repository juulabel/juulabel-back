server:
  port: 5000
  servlet:
    encoding:
      charset: utf-8

spring:
  datasource:
    url: jdbc:mysql://${rds.hostname}:${rds.port}/${rds.db.name}?allowPublicKeyRetrieval=true&useSSL=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${rds.username}
    password: ${rds.password}
    servlet:
      multipart:
        max-file-size: 20MB

  # JPA 설정
  jpa:
    open-in-view: true   # 트래픽이 많은 서비스에서는 명시적으로 세션 열고 닫는 게 나음
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        order_inserts: true
        order_updates: true
        format_sql: true
        show-sql: true

  jwt:
    secret: ${jwt.secret}

  # Security OAuth
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${google.client.id}
            clientSecret: ${google.client.secret}
            authorization-grant-type: authorization_code
            scope:
              - email
              - profile
          kakao:
            clientId: ${kakao.client.id}
            clientSecret: ${kakao.client.secret}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            client-name: kakao
            redirectUri: ${kakao.redirect.uri}
            scope:
              #            - profile_nickname
              #            - profile_image
              - account_email
        # Provider 설정
        provider:
          kakao:
            authorizationUri: https://kauth.kakao.com/oauth/authorize
            tokenUri: https://kauth.kakao.com/oauth/token
            userInfoUri: https://kapi.kakao.com/v2/user/me
            userNameAttribute: id

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: ${token.secret}
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - ${oauth2.uri}

springdoc:
  api-docs:
    path: /api-docs
    groups:
      enabled: true
  packages-to-scan: com.juu.juulabel
  swagger-ui:
    tags-sorter: alpha
    groups-order: asc
    syntax-highlight:
      activated: true
    try-it-out-enabled: false

api:
  kakao:
    kauth: https://kauth.kakao.com
    kapi: https://kapi.kakao.com
  google:
    gauth: https://oauth2.googleapis.com
    gapi: https://www.googleapis.com

cloud:
  aws:
    credentials:
      access-key: ${aws.credentials.access.key}
      secret-key: ${aws.credentials.secret.key}
    s3:
      bucket: ${aws.s3.bucket}
    region:
      static: ap-northeast-2
    stack:
      auto: 'false'